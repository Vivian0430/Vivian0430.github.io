[{"title":"ES6的新特性Symbol","date":"2018-12-05T16:00:00.000Z","path":"2018/12/06/ES6-Symbol/","text":"Symbol1.Symbol是ES6引入的一种新的原始数据类型，表示独一无二的值，减少命名冲突。 1234var a = Symbol(&apos;第一个symbol的值&apos;);var b = Symbol(&apos;第二个symbol的值&apos;);console.log(a === b);//falseconsole.log(a, b);//Symbol(第一个symbol的值) Symbol(第二个symbol的值) 2.Symbol值通过Symbol函数生成 12let s = Symbol();console.log(typeof s);//&quot;symbol&quot; 4.相同参数的Symbol函数的返回值是不相等的。 12345678//无参数的情况let s1 = Symbol();let s2 = Symbol();s1 === s2;//false//有参数的情况let s1 = Symbol(&apos;foo&apos;);let s2 = Symbol(&apos;foo&apos;);s1 === s2 // false 5.Symbol.for 1234var a = Symbol.for(&apos;keyA&apos;); // 创建一个Symbol的值var b = Symbol.for(&apos;keyA&apos;); // 存在，读取值console.log(a === b);//true 6.Symbol作为对象的属性名key（在ES5中key的值只能是字符串） 1234567891011121314151617var keyA = Symbol.for(&apos;KeyA&apos;); var person = &#123; name:&apos;Rose&apos;, age:18, [keyA]:&apos;abc&apos; &#125;; for(var key in person)&#123; //for-in遍历对象，不能遍历对象中的Symbol类型属性 console.log(key , person[key]); &#125;// name Rose// age 18 var keys = Object.getOwnPropertySymbols(person); //遍历对象中的Symbol类型属性 console.log(keys);// [Symbol(keyA)] 7.Symbol 值不能与其他类型的值进行运算，不能进行字符串的拼接。 8.Symbol可以转换为字符串类型和布尔类型，但是不能转换为数值类型。 123let sym = Symbol();String(sym)Boolean(sym)","categories":[],"tags":[{"name":"ES6","slug":"ES6","permalink":"http://yoursite.com/tags/ES6/"}]},{"title":"ES6的新特性let和const","date":"2018-12-05T16:00:00.000Z","path":"2018/12/06/ES6的新特性let和const/","text":"ES6的新特性let和constlet-块级作用域1.ES5中声明变量用var，ES6中用let声明变量，const声明常量。 2.在ES5中变量的作用域分为全局作用域和局部作用域，但是在ES6中新增了块级作用域。let的作用域是在声明变量最近的一对大括号内，var声明变量时是将变量添加到window下，而let不是。 1234567891011if(true)&#123; let i = 100; console.warn(i); //100 &#125; console.log(i); //undefined if(true)&#123; var i = 100; console.warn(i); //100 &#125;console.log(i); //100 3.在for循环遍历时适合使用let声明变量，来避免全局污染。 12345let globalValue = 100; for(let i = 0; i &lt; 10 ;i++)&#123; // i作用域 &#125; console.log(i); //i is not defined var和let的区别重复声明var可以重复声明变量，而let则不可以。 用var对变量再次声明时，最后一次的赋值会覆盖之前的，而let会报has been declared的错误。 123var a = 10;var a = 20;console.log(a); //20 变量提升var可以提升变量的声明，而let不可以。 12345console.log(a);var a = 10; //undefined a被定义了但是没有赋值，提升了变量声明console.log(a);let a = 10; //a is not defined a没有被定义 暂时性死区12345678910111213var i = 1;function foo()&#123; console.log(i); //undefined var i = &quot;hello&quot;; //局部变量声明提升&#125;let i = 1;function foo()&#123; //暂时性死区 console.log(i); //i is not defined i没有被定义 let i = &quot;hello&quot;; //暂时性死区&#125; const在ES6中用const声明常量，声明必须赋值且后期不能修改。 基本类型123const VALUE = 100;console.log(VALUE);VALUE = 200; //值不能改变 引用类型const声明一个对象时，可以修改对象成员 123456789const PERSON = &#123; name:&apos;Rose&apos;, age:18 &#125;; console.log(PERSON); //Rose 18 PERSON.name = &apos;Jack&apos;; PERSON.age = 100; console.log(PERSON); //Jack 100","categories":[],"tags":[{"name":"ES6","slug":"ES6","permalink":"http://yoursite.com/tags/ES6/"}]},{"title":"JavaScript数据类型和类型检测","date":"2018-12-02T16:00:00.000Z","path":"2018/12/03/数据类型和类型检测/","text":"JavaScript数据类型和类型检测JavaScript数据类型JavaScript数据类型主要分为两大类： 1.基本数据类型：字符串(String)，数字(Number)，布尔(Boolean)，空(Null)，未定义(Undefined)，(Symbol) 注:Symbol 是 ES6 引入的一种新的原始数据类型，表示独一无二的值，在此不作详细介绍。 2.复杂数据类型 (引用数据类型)：对象(Object)，函数(Function) 基本类型String&amp;Number123var x; // x 为 undefinedvar x = 1; // x 为 numbervar x = &quot;hi&quot;; // x 为 string Boolean布尔（逻辑）只能有两个值：true 或 false。 Null&amp;Undefined1.Undefined 表示变量声明了但是没有赋值(未初始化)。 2.可以通过将变量的值设置为 null 来清空变量。 12var person = null;console.log(typeof person); // &quot;object&quot;","categories":[],"tags":[{"name":"javascript","slug":"javascript","permalink":"http://yoursite.com/tags/javascript/"}]}]