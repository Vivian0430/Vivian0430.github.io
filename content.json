[{"title":"JavaScript数据类型和类型检测","date":"2017-12-02T16:00:00.000Z","path":"2017/12/03/数据类型和类型检测/","text":"JavaScript数据类型和类型检测JavaScript数据类型JavaScript数据类型主要分为两大类： 1.基本数据类型：字符串(String)，数字(Number)，布尔(Boolean)，空(Null)，未定义(Undefined)，(Symbol) 注:Symbol 是 ES6 引入的一种新的原始数据类型，表示独一无二的值，在此不作详细介绍。 2.复杂数据类型 (引用数据类型)：对象(Object) 基本类型String&amp;Number123var x; // x 为 undefinedvar x = 1; // x 为 numbervar x = &quot;hi&quot;; // x 为 string Boolean布尔（逻辑）只能有两个值：true 或 false。 Null&amp;Undefined1.Undefined 表示变量声明了但是没有赋值(未初始化)。 2.可以通过将变量的值设置为 null 来清空变量。 12var person = null;console.log(typeof person); // &quot;object&quot; 引用类型除了基本数据类型的数据其他数据都是对象（对象，函数，数组…）。 函数（Function）,数组（Array）都可以归为对象。 对象的基本信息：属性，行为（方法） 对象的类型：1.内置对象（原生对象）=&gt;RegExp，Date，Math…(js语言本身预定义的对象) ​ 2.宿主对象=&gt;BOM对象：History，Location，Window，Navigate，Screen ​ DOM对象：Body，Style，Meta，Frame，Frameset… 常用的Math内置对象：（Math对象中的属性和方法都是静态的，可以通过构造器名称访问，无需创建对象） 123456789Math.pow(n,m) n的m次方Math.sqrt 开根号Math.abs() 取绝对值Math.PI Math.random() 在[0,1）区间内取随机数exp:取10到20之间的随机数=&gt;parseInt(Math.random()*10)+10;Math.cei() 向上取整Math.floor() 向下取整Math.round() 四舍五入 可以通过两种方式访问对象的属性 obj.key obj[“key”] 创建对象的方式1.字面量的方式 1234567var obj = &#123; name:&quot;John&quot;, age:50, eyeColor:&quot;blue&quot;, eat:function()&#123;&#125;, sleep:function()&#123;&#125;&#125;; 2.通过new object创建对象 1234var obj = new Object();obj.name = &quot;Jhon&quot;;obj.age = 50;obj.eat = function()&#123;&#125;; 缺点：如果要创建多个对象，需要写很多重复代码。 3.工厂模式创建对象（用函数对第二种方式进行封装，使得相似对象的创建不需要重复代码） 123456function CreateObject(name,age)&#123; var obj = new Object(); obj.name = &quot;Jhon&quot;; obj.age = 50; return obj;&#125; 缺点：无法判断出所创建出对象的具体类型。 4.构造函数创建对象 12345function Person(name,age)&#123; this.name = name; this.age = age;&#125;var p1 = new Person(&quot;Jhon&quot;,50); //实例化 拓展：遍历数组的方式=&gt;for循环 for(var i=0;i&lt;arr.length;i++){} ​ 遍历对象的方式=&gt;for…in 1234567var Person =&#123; name: &quot;Jhon&quot;, age: 50&#125;for(var key in Person)&#123; console.log(key + &quot;:&quot; + Person.key);&#125; 函数的原型原型的作用：可以将对象所有公共的信息（属性和方法）放到原型对象中去。 如果函数和函数原型中有同名的信息，优先使用对象中的信息。 函数的原型prototype，_ proto _,以及函数本身的关系 123var foo = function()&#123;&#125;; =&gt; Function.prototype._ proto _ =&gt; Object.prototype._ proto _ =&gt; NULL 函数本身有一个prototype属性——函数原型（对象所有公共的属性和方法，constructor=&gt;指向函数本身） 函数对象里有一个属性_ proto _=&gt;指向函数原型prototype 123console.log(对象._proto_ === 函数.prototype) //trueconsole.log(对象._proto_.constructor == 函数) //trueconsole.log(函数.prototype.constructor == 函数) //true JavaScript数据类型检测typeof=&gt;string无法判断具体的引用类型数据，如数组 检测的不管是数组还是正则都返回的是”object”,所以typeof不能判断一个值是否为数组 12345678console.log(typeof &quot;&quot;); //stringconsole.log(typeof 1); //numberconsole.log(typeof true); //booleanconsole.log(typeof null); //objectconsole.log(typeof undefined); //undefinedconsole.log(typeof []); //objectconsole.log(typeof function()&#123;&#125;); //functionconsole.log(typeof &#123;&#125;); //object instanceof=&gt;boolean能够判断具体的引用类型（不能用于判断null和undefined） 基本数据类型的值是不能用instanceof来检测的 123456789console.log(&quot;1&quot; instanceof String); //flaseconsole.log(new String(&quot;1&quot;) instanceof String); //trueconsole.log(1 instanceof Number); //falseconsole.log(new Number(1) instanceof Number); //trueconsole.log(true instanceof Boolean); //falseconsole.log(new Boolean(true) instanceof Boolean); //trueconsole.log([] instanceof Array); //trueconsole.log(function()&#123;&#125; instanceof Function); //trueconsole.log(&#123;&#125; instanceof Object); //true constructor123456console.log((&quot;1&quot;).constructor === String); //trueconsole.log((1).constructor === Number); //trueconsole.log((true).constructor === Boolean); //trueconsole.log(([]).constructor === Array); //trueconsole.log((function() &#123;&#125;).constructor === Function); //trueconsole.log((&#123;&#125;).constructor === Object); //true constructor不适用情况 12345678function Fn()&#123;&#125;;Fn.prototype=new Array(); //函数的原型指向数组var f=new Fn(); //实例化console.log(f.constructor===Fn); //falseconsole.log(f.constructor===Array); //true Object.prototype.toString.call()12345678910var a = Object.prototype.toString;console.log(a.call(&quot;aaa&quot;)); //[object String]console.log(a.call(1)); //[object Number]console.log(a.call(true)); //[object Boolean]console.log(a.call(null)); //[object Null]console.log(a.call(undefined)); //[object Undefined]console.log(a.call([])); //[object Array]console.log(a.call(function() &#123;&#125;)); //[object Function]console.log(a.call(&#123;&#125;)); //[object Object] isNaN,isBoolean…12345678console.log(isObject(&#123;&#125;)); //trueconsole.log(isDate(new Date())); //trueconsole.log(isBoolean(false)); //trueconsole.log(isString(1)); //falseconsole.log(isError(1)); //falseconsole.log(isError(new Error())); //trueconsole.log(isArray([])); //trueconsole.log(isArray(1)); //false","categories":[],"tags":[{"name":"javascript","slug":"javascript","permalink":"http://yoursite.com/tags/javascript/"}]}]